@using System.Text
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@inherits TemplateCs<AutoRest.CSharp.Model.MethodCs>
@{
if (Model.SyncMethods == SyncMethodsGenerationMode.All || Model.SyncMethods == SyncMethodsGenerationMode.Essential)
{
    @XmlDocHandleDescriptionSummaryExternalDocs(Model.Description, Model.Summary, Model.ExternalDocsUrl)
@XmlDocParam("operations", "operations group for this extension method")
    foreach (var parameter in Model.LocalParameters)
    {
@XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
    }
@if (Model.Deprecated)
{
@:[System.Obsolete()]
}
@:@((Model as MethodCs).AccessModifier) static @Model.ReturnTypeString @(Model.Name)(@Model.GetExtensionParameters(Model.GetSyncMethodParameterDeclaration(false)))
@:{
    if (Model.ReturnType.Body != null)
    {
    @:return ((I@(Model.MethodGroup.TypeName))operations).@(Model.Name)Async(@(Model.SyncMethodInvocationArgs)).GetAwaiter().GetResult();
    }
    else if (Model.ReturnType.Headers != null)
    {
    @:return ((I@(Model.MethodGroup.TypeName))operations).@(Model.Name)Async(@(Model.SyncMethodInvocationArgs)).GetAwaiter().GetResult();
    }
    else
    {
    @:((I@(Model.MethodGroup.TypeName))operations).@(Model.Name)Async(@(Model.SyncMethodInvocationArgs)).GetAwaiter().GetResult();
    }
@:}
@EmptyLine
}

@XmlDocHandleDescriptionSummaryExternalDocs(Model.Description, Model.Summary, Model.ExternalDocsUrl)
@XmlDocParam("operations", "operations group for this extension method")
foreach (var parameter in Model.LocalParameters)
{
@XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
}
@XmlDocParamCancellationToken()
@if (Model.Deprecated)
{
@:[System.Obsolete()]
}
@:@((Model as MethodCs).AccessModifier) static async @Model.TaskExtensionReturnTypeString @(Model.Name)Async(@Model.GetExtensionParameters(Model.GetAsyncMethodParameterDeclaration()))
@:{
    if (Model.ReturnType.Body != null && Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream))
    {
        @:using (var _result = await operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("null"))).ConfigureAwait(false))    
    }
    else
    {
        @:var _result = await operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("null"))).ConfigureAwait(false);
        @:_result.Request.Dispose();
    }
    if (Model.ReturnType.Body != null || Model.ReturnType.Headers != null)
    {
        @:return new HttpResponse<@(Model.OperationResponseReturnTypeBodyString), @(Model.OperationResponseReturnTypeHeadersString)>(_result.Body, _result.Headers);
    }
@:}

    if (Model.SyncMethods == SyncMethodsGenerationMode.All)
    {
@EmptyLine
    @XmlDocHandleDescriptionSummaryExternalDocs(Model.Description, Model.Summary, Model.ExternalDocsUrl)
@XmlDocParam("operations", "operations group for this extension method")
    foreach (var parameter in Model.LocalParameters)
    {
@XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
    }
@XmlDocParamCustomHeaders()
@if (Model.Deprecated)
{
@:[System.Obsolete()]
}
@:@((Model as MethodCs).AccessModifier) static @Model.OperationResponseReturnTypeString @(Model.Name)WithHttpMessages(@Model.GetExtensionParameters(Model.GetSyncMethodParameterDeclaration(true)))
@:{
@:    return operations.@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("customHeaders", "System.Threading.CancellationToken.None"))).ConfigureAwait(false).GetAwaiter().GetResult();
@:}
@:
    }
}