// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Operations.
    /// </summary>
    public partial interface IOperations
    {
        /// <summary>
        /// Returns a list of ZapApp Applications under your account
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<ApplicationModel>>> Applications_GetApplications(string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds a new Application to the Zapappi subscription
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='enabled'>
        /// </param>
        /// <param name='scriptBody'>
        /// </param>
        /// <param name='scriptUrl'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<string>> Applications_AddApplication(string subscriptionId, string name, string description, bool enabled, string scriptBody, string scriptUrl, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a specific Application based on the Id
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApplicationModel>> Applications_GetApplication(string subscriptionId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates an existing Zapappi Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription id the application is attached too
        /// </param>
        /// <param name='appId'>
        /// The application id
        /// </param>
        /// <param name='description'>
        /// The application description
        /// </param>
        /// <param name='enabled'>
        /// Is the application enabled (call it be used to termiante calls)
        /// </param>
        /// <param name='scriptBody'>
        /// The script used to process the call
        /// </param>
        /// <param name='scriptUrl'>
        /// The Url of your script (if set, ScriptBody won't be used)
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Applications_UpdateApplication(string subscriptionId, string appId, string description, bool enabled, string scriptBody, string scriptUrl, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of media files attached to this Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Application Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<string>>> Applications_GetApplicationFiles(string subscriptionId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a media file attached to this Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Application Id
        /// </param>
        /// <param name='filename'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Applications_DeleteApplicationFile(string subscriptionId, string id, string filename, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new outbound call request for this Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Application Id
        /// </param>
        /// <param name='model'>
        /// Callout details
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CalloutReturnModel>> Applications_ApplicationCallout(string subscriptionId, string id, CalloutModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of Application Resources associated with the given
        /// Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<ResourceModel>>> Applications_GetApplicationResources(string subscriptionId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds an Application Resource to the given Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> Applications_AddApplicationResources(string subscriptionId, string id, ResourceModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes an Application Resource from the given Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='resourceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Applications_DeleteApplicationResources(string subscriptionId, string id, string resourceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of SIP Provider Accounts connected to your ZapApp
        /// platform
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<SIPProviderModel>>> Applications_GetSIPProviders(string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns call records for the given application
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='startDate'>
        /// </param>
        /// <param name='endDate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<ApplicationCDRModel>>> Applications_GetApplicationCDR(string subscriptionId, string id, int? skip = default(int?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='manifestUrl'>
        /// </param>
        /// <param name='applicationName'>
        /// </param>
        /// <param name='applicationDescription'>
        /// </param>
        /// <param name='configurationValues'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApplicationModel>> Applications_DeployApplication(string subscriptionId, string manifestUrl, string applicationName, string applicationDescription, IDictionary<string, string> configurationValues, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all the Key Value Pairs for a given Application
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription Id
        /// </param>
        /// <param name='id'>
        /// Application Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<KeyValuePairModel>>> Applications_GetApplicationKeyValuePairs(string subscriptionId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of contacts
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='country'>
        /// The country of the contact
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<ContactsModel>>> Contacts_GetContacts(string subscriptionId, int take, int skip, System.Guid? country = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a new contact
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='building'>
        /// </param>
        /// <param name='city'>
        /// </param>
        /// <param name='street'>
        /// </param>
        /// <param name='postcode'>
        /// </param>
        /// <param name='company'>
        /// </param>
        /// <param name='title'>
        /// </param>
        /// <param name='firstName'>
        /// </param>
        /// <param name='lastName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ContactsModel>> Contacts_AddContact(string subscriptionId, string building, string city, string street, string postcode, string company = default(string), string title = default(string), string firstName = default(string), string lastName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a contact
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// Get specific contact
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ContactsModel>> Contacts_GetContact(string subscriptionId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of domains associated with your services
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<CustomerDomain>>> Domains_GetDomains(string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Endpoints from Inbound Platform
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='take'>
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='search'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<EndpointViewModel>>> Inbound_GetEndpoints(string subscriptionId, int? take = default(int?), int? skip = default(int?), string search = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Simple Endpoint Details
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='endpointId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SimpleEndpointModel>> Inbound_GetSimpleEndpoint(string subscriptionId, string endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Simple Endpoint
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SimpleEndpointModel>> Inbound_UpdateSimpleEndpoint(string subscriptionId, SimpleEndpointModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Simple Endpoint
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='forwardUri'>
        /// </param>
        /// <param name='username'>
        /// </param>
        /// <param name='password'>
        /// </param>
        /// <param name='proxyUri'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SimpleEndpointModel>> Inbound_CreateSimpleEndpoint(string subscriptionId, string description, string forwardUri, string username = default(string), string password = default(string), string proxyUri = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Mappings from Inbound Platform
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='take'>
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='search'>
        /// </param>
        /// <param name='withoutEndpoint'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<EndpointMappingViewModel>>> Inbound_GetMappings(string subscriptionId, int? take = default(int?), int? skip = default(int?), string search = default(string), bool? withoutEndpoint = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='domain'>
        /// </param>
        /// <param name='match'>
        /// </param>
        /// <param name='endpointId'>
        /// </param>
        /// <param name='isDefault'>
        /// </param>
        /// <param name='cvar1'>
        /// </param>
        /// <param name='cvar2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EndpointMappingViewModel>> Inbound_AddMapping(string subscriptionId, string domain, string match, string endpointId, bool isDefault, string cvar1, string cvar2, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a specific Mapping from Inbound Platform by Id
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EndpointMappingViewModel>> Inbound_GetMapping(string subscriptionId, System.Guid id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='endpointId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EndpointMappingViewModel>> Inbound_UpdateMapping(string subscriptionId, string id, string endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of the numbers under the given subscription
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='take'>
        /// </param>
        /// <param name='countryId'>
        /// </param>
        /// <param name='search'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<TelephoneNumberModel>>> Numbers_ExistingNumbers(string subscriptionId, int? skip = default(int?), int? take = default(int?), System.Guid? countryId = default(System.Guid?), string search = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='countryId'>
        /// </param>
        /// <param name='numberType'>
        /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
        /// 'PremiumRate', 'Freephone'
        /// </param>
        /// <param name='areaId'>
        /// </param>
        /// <param name='numberQty'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<TelephoneNumberModel>>> Numbers_PurchaseNumbers(string subscriptionId, string countryId, string numberType, string areaId, int numberQty, string description = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a specific number for the given subscription
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='numberId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TelephoneNumberModel>> Numbers_ExistingNumber(string id, string subscriptionId, string numberId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of countries for which numbers are available
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<Country>>> Numbers_GetCountries(string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of states available for a given country
        /// </summary>
        /// <param name='countryId'>
        /// </param>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<State>>> Numbers_GetStatesByCountry(string countryId, string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of Areas available for a given State and Country
        /// </summary>
        /// <param name='countryId'>
        /// </param>
        /// <param name='stateId'>
        /// </param>
        /// <param name='numberType'>
        /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
        /// 'PremiumRate', 'Freephone'
        /// </param>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<Area>>> Numbers_GetAreasByStateAndCountry(string countryId, string stateId, string numberType, string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of Areas available for a given Country
        /// </summary>
        /// <param name='countryId'>
        /// </param>
        /// <param name='numberType'>
        /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
        /// 'PremiumRate', 'Freephone'
        /// </param>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<Area>>> Numbers_GetAreasByCountry(string countryId, string numberType, string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the SMS Endoint for the given number
        /// </summary>
        /// <param name='numberId'>
        /// The UniqueID of the number
        /// </param>
        /// <param name='endpointType'>
        /// The endpoint type that daa should be sent to. Possible values
        /// include: 'None', 'EMail', 'HTTPPost', 'HTTPGet'
        /// </param>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='number'>
        /// </param>
        /// <param name='data'>
        /// Data for the endpoint type (E.g. Url or EMail Address)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Numbers_SetSMSEndpoint(string numberId, string endpointType, string subscriptionId, string number, string data = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your port requests as a paged response
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<PortModel>>> Porting_GetPortRequests(string subscriptionId, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='reference'>
        /// User Reference for the Port Request
        /// </param>
        /// <param name='type'>
        /// Number Type for the Port Request. Possible values include: 'Geo',
        /// 'NonGeo', 'Mobile', 'Freephone'
        /// </param>
        /// <param name='countryId'>
        /// Country of the Port Request
        /// </param>
        /// <param name='billingNumber'>
        /// The billing number for this Port Request
        /// </param>
        /// <param name='requestedPortDate'>
        /// Specify a preferred porting date
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PortModel>> Porting_CreatePortRequest(string subscriptionId, string reference, string type, string countryId, string billingNumber = default(string), System.DateTime? requestedPortDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a specific port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id for the Port Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PortModel>> Porting_GetPortRequest(string subscriptionId, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='billingNumber'>
        /// The billing number of the Port Request
        /// </param>
        /// <param name='reference'>
        /// The reference of the Port Request
        /// </param>
        /// <param name='requestedPortDate'>
        /// Specify a preferred porting date
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> Porting_UpdatePortRequest(string subscriptionId, int id, string billingNumber, string reference = default(string), System.DateTime? requestedPortDate = default(System.DateTime?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete the specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> Porting_DeletePortRequest(string subscriptionId, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get numbers associated with a specific port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id for the Port Request
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='search'>
        /// Find a specific number details
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<RequestNumberModel>>> Porting_GetPortNumbers(string subscriptionId, int id, int take, int skip, string search = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add numbers to a port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='numbers'>
        /// List of numbers to add to the Port Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<RequestNumberModel>>> Porting_AddPortNumbers(string subscriptionId, int id, IList<string> numbers, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='numbers'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<RequestNumberModel>>> Porting_RemovePortNumbers(string subscriptionId, int id, IList<int?> numbers, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submit a specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> Porting_SubmitPortRequest(string subscriptionId, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a Billing file to a specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> Porting_AddPortFile(string subscriptionId, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add an LOA to a specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='customerContactId'>
        /// The Id of the customer contact
        /// </param>
        /// <param name='requesterContactId'>
        /// The Id of the requester contact
        /// </param>
        /// <param name='siteContactId'>
        /// The Id of the site contact
        /// </param>
        /// <param name='losingProviderId'>
        /// The Id of the losing provider
        /// </param>
        /// <param name='otherProvider'>
        /// If provider is missing
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<LoaModel>> Porting_AddPortLoa(string subscriptionId, int id, string customerContactId, string requesterContactId, string siteContactId, string losingProviderId, string otherProvider = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a file to an LOA for a specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='loaId'>
        /// The Id of the Contact to add the file to
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> Porting_AddPortLoaFile(string subscriptionId, int id, int loaId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate an LOA file for a specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<LoaModel>> Porting_GeneratePortLoaFile(string subscriptionId, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of messages for a specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> Porting_GetPortMessages(string subscriptionId, int id, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a message to a specified port request
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// The Id of Port Request
        /// </param>
        /// <param name='message'>
        /// The message to add to the Port Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> Porting_AddPortMessage(string subscriptionId, int id, string message, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of porting countries
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<CountryModel>>> Porting_GetPortingCountries(string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of porting providers for a country
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='countryId'>
        /// </param>
        /// <param name='type'>
        /// The number type. Possible values include: 'National', 'Mobile',
        /// 'Local', 'Freephone'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<ProviderModel>>> Porting_GetPortingProviders(string subscriptionId, string countryId, string type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='url'>
        /// The url of the webhook
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RequestWebhookModel>> Porting_AddPortingWebhook(string subscriptionId, string url, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sends an SMS Message to the given destination
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='source'>
        /// </param>
        /// <param name='destination'>
        /// </param>
        /// <param name='message'>
        /// </param>
        /// <param name='webhook'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SMSResponseModel>> SMS_SendSms(string subscriptionId, string source, string destination, string message, string webhook = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all SMSs currently in your numbers queue
        /// </summary>
        /// <param name='numberId'>
        /// </param>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        [System.Obsolete()]
        Task<HttpOperationResponse<IList<SMSQueueItem>>> SMS_GetSmsQueue(string numberId, string subscriptionId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a specific SMS from the queue
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='entryId'>
        /// </param>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='messageId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        [System.Obsolete()]
        Task<HttpOperationResponse<object>> SMS_GetSmsFromQueue(string id, string entryId, string subscriptionId, string messageId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the SMS Log for the given Subscription Id
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='take'>
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='messageId'>
        /// </param>
        /// <param name='destination'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<SmsCdrEntry>>> SMS_GetSmsLog(string subscriptionId, int? take = default(int?), int? skip = default(int?), string messageId = default(string), string destination = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get your SIP Trunks as a PagedResponse
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<SipTrunkModel>>> Trunks_GetTrunks(string subscriptionId, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new SIP Trunk
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='endpointId'>
        /// </param>
        /// <param name='autoCreateEndpoint'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<NewSipTrunkResponseModel>> Trunks_CreateTrunk(string subscriptionId, string description, string endpointId, bool autoCreateEndpoint, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a specific SIP Trunk by Id
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkModel>> Trunks_GetTrunk(string subscriptionId, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update SIP Trunk
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk ID to get endpoints for
        /// </param>
        /// <param name='model'>
        /// Model used to update Trunk
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkModel>> Trunks_UpdateTrunk(string subscriptionId, int id, UpdateSIPTrunkModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return PagedResponse of SIP Trunk Endpoints (IP Addresses)
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk ID to get endpoints for
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<SipTrunkEndpointModel>>> Trunks_GetTrunkEndpoints(string subscriptionId, int id, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new SIP Trunk Endpoint IP Address
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk Id
        /// </param>
        /// <param name='model'>
        /// Endpoint Model
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkEndpointModel>> Trunks_CreateTrunkEndpoint(string subscriptionId, int id, NewSipTrunkEndpointModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete the specified SIP Trunk Endpoint
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk Id
        /// </param>
        /// <param name='endpointId'>
        /// Endpoint Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Trunks_DeleteTrunkEndpoint(string subscriptionId, int id, int endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get specific SIP Trunk endpoint
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk Id
        /// </param>
        /// <param name='endpointId'>
        /// Endpoint Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkEndpointModel>> Trunks_GetTrunkEndpoint(string subscriptionId, int id, int endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of all restrictions on the trunk (Blacklist and
        /// Whitelist items)
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// Trunk Id
        /// </param>
        /// <param name='take'>
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<SipTrunkRestrictionItemModel>>> Trunks_GetRestrictions(string subscriptionId, int id, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds a new restriction to the trunk (Blacklist and Whitelist items)
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// Trunk Id
        /// </param>
        /// <param name='prefix'>
        /// Called number prefix
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='blacklist'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Trunks_AddRestriction(string subscriptionId, int id, string prefix, string description, bool blacklist, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
