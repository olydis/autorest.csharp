// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.ContentTypeHeader.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ImageType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ImageTypeConverter))]
    public struct ImageType : System.IEquatable<ImageType>
    {
        private ImageType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly ImageType ImageGif = "image/gif";

        public static readonly ImageType ImageJpeg = "image/jpeg";

        public static readonly ImageType ImagePng = "image/png";

        public static readonly ImageType ImageBmp = "image/bmp";

        public static readonly ImageType ImageTiff = "image/tiff";


        /// <summary>
        /// Underlying value of enum ImageType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ImageType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ImageType
        /// </summary>
        public bool Equals(ImageType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ImageType
        /// </summary>
        public static implicit operator ImageType(string value)
        {
            return new ImageType(value);
        }

        /// <summary>
        /// Implicit operator to convert ImageType to string
        /// </summary>
        public static implicit operator string(ImageType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ImageType
        /// </summary>
        public static bool operator == (ImageType e1, ImageType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ImageType
        /// </summary>
        public static bool operator != (ImageType e1, ImageType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ImageType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ImageType && Equals((ImageType)obj);
        }

        /// <summary>
        /// Returns for hashCode ImageType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
